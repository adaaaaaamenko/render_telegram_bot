import asyncio
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from datetime import datetime, timedelta
import os

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —ç—Ç–∞–ø–æ–≤ –¥–∏–∞–ª–æ–≥–∞
LANGUAGE, DATE, TIME = range(3)

ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # –∏–ª–∏ —É–∫–∞–∂–∏ –ø—Ä—è–º–æ: ADMIN_CHAT_ID = 123456789
DATA_FILE = "appointments.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="ru")],
        [InlineKeyboardButton("English", callback_data="en")],
        [InlineKeyboardButton("·É•·Éê·É†·Éó·É£·Éö·Éò", callback_data="ka")],
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    return LANGUAGE

# –Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω
async def language_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["language"] = query.data

    today = datetime.now().date()
    keyboard = [
        [InlineKeyboardButton((today + timedelta(days=i)).strftime("%Y-%m-%d"), callback_data=(today + timedelta(days=i)).isoformat())]
        for i in range(3)
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(keyboard))
    return DATE

# –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞
async def date_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["date"] = query.data

    appointments = load_data()
    date_key = context.user_data["date"]
    taken = appointments.get(date_key, {})

    keyboard = []
    for hour in range(12, 22):  # 12:00 ‚Äì 21:00
        time_str = f"{hour}:00"
        if time_str in taken:
            label = f"{time_str} ‚ùå {taken[time_str]}"
            callback = "taken"
        else:
            label = f"{time_str}"
            callback = time_str
        keyboard.append([InlineKeyboardButton(label, callback_data=callback)])

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    return TIME

# –í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ
async def time_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected_time = query.data

    if selected_time == "taken":
        await query.answer("–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.", show_alert=True)
        return TIME

    context.user_data["time"] = selected_time

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    date_key = context.user_data["date"]
    time_key = context.user_data["time"]
    lang = context.user_data["language"]
    appointments = load_data()

    if date_key not in appointments:
        appointments[date_key] = {}

    appointments[date_key][time_key] = lang
    save_data(appointments)

    msg = f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:\n–î–∞—Ç–∞: {date_key}\n–í—Ä–µ–º—è: {time_key}\n–Ø–∑—ã–∫: {lang}"
    await query.edit_message_text(msg)

    if ADMIN_CHAT_ID:
        await context.bot.send_message(chat_id=int(ADMIN_CHAT_ID), text=f"üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n{msg}")

    return ConversationHandler.END

# –í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    application = Application.builder().token(os.getenv("BOT_TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANGUAGE: [CallbackQueryHandler(language_selected)],
            DATE: [CallbackQueryHandler(date_selected)],
            TIME: [CallbackQueryHandler(time_selected)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)

    await application.run_polling()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())
